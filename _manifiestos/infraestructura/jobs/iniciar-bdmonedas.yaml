apiVersion: batch/v1
kind: Job
metadata:
  name: iniciar-bdmonedas
spec:
  ttlSecondsAfterFinished: null
  backoffLimit: 0
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: iniciar-bdmonedas
          image: postgres:16
          command: ["/bin/bash", "-c"]
          args:
            - |
              apt-get update && apt-get install -y postgresql-client psmisc && rm -rf /var/lib/apt/lists/*
              
              echo "Esperando 5 segundos para asegurar la resolución DNS dentro del pod..."
              sleep 5

              DB_HOST="bdmonedas-servicio"
              DB_USER="postgres"
              DB_NAME_POSTGRES="postgres"
              DB_NAME_MONEDAS="monedas"
              MAX_RETRIES=90 # Aumentado el número de reintentos para dar más tiempo a la DB
              RETRY_INTERVAL=2 # Intervalo de espera en segundos

              echo "Esperando a que Postgres acepte conexiones en la DB '${DB_NAME_POSTGRES}'..."
              for i in $(seq 1 $MAX_RETRIES); do
                PGPASSWORD="${PGPASSWORD}" psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME_POSTGRES" -c '\q' &>/dev/null            
                if [ $? -eq 0 ]; then
                  echo "Postgres está listo para conexiones en la DB '${DB_NAME_POSTGRES}'."
                  break
                fi
                sleep $RETRY_INTERVAL
                if [ $i -eq $MAX_RETRIES ]; then
                  exit 1
                fi
              done

              echo "Creando la base de datos '${DB_NAME_MONEDAS}' si no existe..."
              PGPASSWORD="${PGPASSWORD}" psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME_POSTGRES" -c "CREATE DATABASE ${DB_NAME_MONEDAS};" &>/dev/null || true
              echo "Verificado: La base de datos '${DB_NAME_MONEDAS}' existe."

              echo "Esperando a que Postgres acepte conexiones en la DB '${DB_NAME_MONEDAS}'..."
              for i in $(seq 1 $MAX_RETRIES); do
                PGPASSWORD="${PGPASSWORD}" psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME_MONEDAS" -c '\q' &>/dev/null
                if [ $? -eq 0 ]; then
                  echo "Postgres está listo para conexiones en la DB '${DB_NAME_MONEDAS}'."
                  break
                fi
                echo "Postgres no está listo (DB '${DB_NAME_MONEDAS}') - reintento $i/$MAX_RETRIES - esperando ${RETRY_INTERVAL}s..."
                sleep $RETRY_INTERVAL
                if [ $i -eq $MAX_RETRIES ]; then
                  exit 1
                fi
              done

              echo "Ejecutando DDL..."
              PGPASSWORD="${PGPASSWORD}" psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME_MONEDAS" -f /scripts/DDL_monedas.sql &>/dev/null
              echo "Ejecutando DML..."
              PGPASSWORD="${PGPASSWORD}" psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME_MONEDAS" -f /scripts/DML_monedas.sql &>/dev/null
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: bdmonedas-secretos
                  key: BDMONEDAS_PASSWORD
          volumeMounts:
            - name: scripts
              mountPath: /scripts
      volumes:
        - name: scripts
          configMap: 
            name: bdmonedas-cm-iniciar